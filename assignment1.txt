NAME-SIDHHAY ABROL ROLL NO-1024031157
Q1->MENU DRIVEN ARRAY OPERATIONS
#include<iostream>
using namespace std;
void createArray(int arr[], int &n) {
cout << "Enter number of elements: ";
cin >> n;
cout << "Enter elements: ";
for (int i = 0; i < n; i++) cin >> arr[i];
}
void displayArray(int arr[], int n) {
cout << "Array elements: ";
for (int i = 0; i < n; i++) cout << arr[i] << " ";
cout << endl;
}
void insertElement(int arr[], int &n) {
int pos, val;
cout << "Enter position and value: ";
cin >> pos >> val;
if (pos < 0 || pos > n) { cout << "Invalid position!\n"; return; }
for (int i = n; i > pos; i--) arr[i] = arr[i-1];
arr[pos] = val;
n++;
}
void deleteElement(int arr[], int &n) {
int pos;
cout << "Enter position to delete: ";
cin >> pos;
if (pos < 0 || pos >= n) { cout << "Invalid position!\n"; return; }
for (int i = pos; i < n-1; i++) arr[i] = arr[i+1];
n--;
}
void linearSearch(int arr[], int n) {
int key;
cout << "Enter element to search: ";
cin >> key;
for (int i = 0; i < n; i++) {
if (arr[i] == key) {
cout << "Element found at position " << i << endl;
return;
}
}
cout << "Element not found.\n";
}
int main() {
int arr[100], n = 0, choice;
while (true) {
cout << "1.CREATE 2.DISPLAY 3.INSERT 4.DELETE 5.LINEAR SEARCH 6.EXIT\n";
cout << "Enter your choice: ";
cin >> choice;
switch (choice) {
case 1: createArray(arr, n); break;
case 2: displayArray(arr, n); break;
case 3: insertElement(arr, n); break;
case 4: deleteElement(arr, n); break;
case 5: linearSearch(arr, n); break;
case 6: return 0;
default: cout << "Invalid choice!\n";
}
}
}
Q2=>REMOVE DUPLICATE elements
#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    if (n > 100) {
        cout << "Too many elements (max 100)!" << endl;
        return 1;
    }

    int arr[100];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) cin >> arr[i];

    // Removing duplicates
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; ) {
            if (arr[i] == arr[j]) {
                for (int k = j; k < n - 1; k++) arr[k] = arr[k + 1];
                n--;
            } else {
                j++;
            }
        }
    }

    cout << "Array after removing duplicates: ";
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    cout << endl;

    return 0;
}
Q3=>OUTPUT
#include
 using namespace std;
 int main() {
int i;
 int arr[5] = {1};
 for (i = 0; i < 5; i++)
 cout << arr[i];
 return 0;
 }
 // Output: 10000 (first element is 1, others are initialized to 0)
Q4=>Reverse Array, Matrix Multiplication, TransposE
#include <iostream>
using namespace std;

void reverseArray(int arr[], int n) {
    for (int i = 0; i < n / 2; i++) {
        int temp = arr[i];
        arr[i] = arr[n - i - 1];
        arr[n - i - 1] = temp;
    }
}

void multiplyMatrix(int a[10][10], int b[10][10], int res[10][10], int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            res[i][j] = 0;
            for (int k = 0; k < n; k++)
                res[i][j] += a[i][k] * b[k][j];
        }
}

void transposeMatrix(int a[10][10], int n) {
    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++)
            swap(a[i][j], a[j][i]);
}

// Helper function to print matrix
void printMatrix(int a[10][10], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            cout << a[i][j] << " ";
        cout << endl;
    }
}

int main() {
    // Reverse array test
    int arr[] = {1, 2, 3, 4, 5};
    int n = 5;
    reverseArray(arr, n);
    cout << "Reversed array: ";
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    cout << endl;

    // Matrix multiplication and transpose test
    int A[10][10] = {{1, 2}, {3, 4}};
    int B[10][10] = {{5, 6}, {7, 8}};
    int RES[10][10];
    int size = 2;

    multiplyMatrix(A, B, RES, size);
    cout << "Matrix multiplication result:\n";
    printMatrix(RES, size);

    transposeMatrix(A, size);
    cout << "Transpose of matrix A:\n";
    printMatrix(A, size);

    return 0;
}
Q5=>Sum of Rows and Column
#include <iostream>
using namespace std;

int main() {
    int r, c;
    cout << "Enter rows and columns: ";
    cin >> r >> c;

    int arr[10][10];  // Assuming max size is 10x10

    cout << "Enter elements: ";
    for (int i = 0; i < r; i++)
        for (int j = 0; j < c; j++)
            cin >> arr[i][j];

    // Sum of each row
    for (int i = 0; i < r; i++) {
        int sum = 0;
        for (int j = 0; j < c; j++)
            sum += arr[i][j];
        cout << "Sum of row " << i + 1 << " = " << sum << endl;
    }

    // Sum of each column
    for (int j = 0; j < c; j++) {
        int sum = 0;
        for (int i = 0; i < r; i++)
            sum += arr[i][j];
        cout << "Sum of column " << j + 1 << " = " << sum << endl;
    }

    return 0;
}
